// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Identifies a Rule Set which should be skipped.
    /// </summary>
    public partial class SkipActionRuleSet
    {
        /// <summary>
        /// Initializes a new instance of the SkipActionRuleSet class.
        /// </summary>
        public SkipActionRuleSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SkipActionRuleSet class.
        /// </summary>
        /// <param name="ruleSetType">Defines the Rule Set type.</param>
        /// <param name="ruleSetVersion">Defines the Rule Set version.</param>
        /// <param name="ruleGroups">List of Rule Groups which should be
        /// skipped.</param>
        public SkipActionRuleSet(string ruleSetType, string ruleSetVersion, IList<ManagedRuleGroupOverride> ruleGroups = default(IList<ManagedRuleGroupOverride>))
        {
            RuleSetType = ruleSetType;
            RuleSetVersion = ruleSetVersion;
            RuleGroups = ruleGroups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets defines the Rule Set type.
        /// </summary>
        [JsonProperty(PropertyName = "ruleSetType")]
        public string RuleSetType { get; set; }

        /// <summary>
        /// Gets or sets defines the Rule Set version.
        /// </summary>
        [JsonProperty(PropertyName = "ruleSetVersion")]
        public string RuleSetVersion { get; set; }

        /// <summary>
        /// Gets or sets list of Rule Groups which should be skipped.
        /// </summary>
        [JsonProperty(PropertyName = "ruleGroups")]
        public IList<ManagedRuleGroupOverride> RuleGroups { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RuleSetType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RuleSetType");
            }
            if (RuleSetVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RuleSetVersion");
            }
            if (RuleGroups != null)
            {
                foreach (var element in RuleGroups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
