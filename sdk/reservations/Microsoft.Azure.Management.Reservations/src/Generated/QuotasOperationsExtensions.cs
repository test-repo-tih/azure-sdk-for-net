// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Reservations
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for QuotasOperations.
    /// </summary>
    public static partial class QuotasOperationsExtensions
    {
            /// <summary>
            /// Gets the current quota limit and usages for the resource provider for the
            /// specified location for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limit and usages for the specific resource
            /// for resource provider for the specified location. This response can be used
            /// to submit quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            public static QuotaRequestOneResourceProperties GetStatus(this IQuotasOperations operations, string subscriptionId, string providerId, string location)
            {
                return operations.GetStatusAsync(subscriptionId, providerId, location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current quota limit and usages for the resource provider for the
            /// specified location for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limit and usages for the specific resource
            /// for resource provider for the specified location. This response can be used
            /// to submit quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QuotaRequestOneResourceProperties> GetStatusAsync(this IQuotasOperations operations, string subscriptionId, string providerId, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(subscriptionId, providerId, location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information. This information consists of a list
            /// of resources and information regarding those resources. For all the
            /// resources in that list which requires an update to their quotas, update
            /// their limit fields in the response from the Get request to their new
            /// values. Then, submit individual request for each resource using the updated
            /// JSON object to this quota request API. This will update the quotas to the
            /// values specified. The AzureAsyncOperation header in the response will be
            /// used to track the status of the quota request. Please poll the url provided
            /// in AzureAsyncOperation Header to get the status.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static QuotaRequestOneResourceProperties Create(this IQuotasOperations operations, string subscriptionId, string providerId, string location, QuotaRequestOneResourceProperties createQuotaRequest, string ifMatch)
            {
                return operations.CreateAsync(subscriptionId, providerId, location, createQuotaRequest, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information. This information consists of a list
            /// of resources and information regarding those resources. For all the
            /// resources in that list which requires an update to their quotas, update
            /// their limit fields in the response from the Get request to their new
            /// values. Then, submit individual request for each resource using the updated
            /// JSON object to this quota request API. This will update the quotas to the
            /// values specified. The AzureAsyncOperation header in the response will be
            /// used to track the status of the quota request. Please poll the url provided
            /// in AzureAsyncOperation Header to get the status.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QuotaRequestOneResourceProperties> CreateAsync(this IQuotasOperations operations, string subscriptionId, string providerId, string location, QuotaRequestOneResourceProperties createQuotaRequest, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(subscriptionId, providerId, location, createQuotaRequest, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information. This information consists of a list
            /// of resources and information regarding those resources. For all the
            /// resources in that list which requires an update to their quotas, update
            /// their limit fields in the response from the Get request to their new
            /// values. Then, submit individual request for each resource using the updated
            /// JSON object to this quota request API. This will update the quotas to the
            /// values specified. The AzureAsyncOperation header in the response will be
            /// used to track the status of the quota request. Please poll the url provided
            /// in AzureAsyncOperation Header to get the status.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static QuotaRequestOneResourceProperties Update(this IQuotasOperations operations, string subscriptionId, string providerId, string location, QuotaRequestOneResourceProperties createQuotaRequest, string ifMatch)
            {
                return operations.UpdateAsync(subscriptionId, providerId, location, createQuotaRequest, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information. This information consists of a list
            /// of resources and information regarding those resources. For all the
            /// resources in that list which requires an update to their quotas, update
            /// their limit fields in the response from the Get request to their new
            /// values. Then, submit individual request for each resource using the updated
            /// JSON object to this quota request API. This will update the quotas to the
            /// values specified. The AzureAsyncOperation header in the response will be
            /// used to track the status of the quota request. Please poll the url provided
            /// in AzureAsyncOperation Header to get the status.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QuotaRequestOneResourceProperties> UpdateAsync(this IQuotasOperations operations, string subscriptionId, string providerId, string location, QuotaRequestOneResourceProperties createQuotaRequest, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(subscriptionId, providerId, location, createQuotaRequest, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the current quota limit and usages for all the resources by the
            /// resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limits and usages for the resource provider
            /// for the specified location. This response can be used to submit
            /// quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            public static IPage<CurrentQuotaLimitBase> ListStatus(this IQuotasOperations operations, string subscriptionId, string providerId, string location)
            {
                return operations.ListStatusAsync(subscriptionId, providerId, location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current quota limit and usages for all the resources by the
            /// resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limits and usages for the resource provider
            /// for the specified location. This response can be used to submit
            /// quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CurrentQuotaLimitBase>> ListStatusAsync(this IQuotasOperations operations, string subscriptionId, string providerId, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStatusWithHttpMessagesAsync(subscriptionId, providerId, location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information. This information consists of a list
            /// of resources and information regarding those resources. For all the
            /// resources in that list which requires an update to their quotas, update
            /// their limit fields in the response from the Get request to their new
            /// values. Then, submit individual request for each resource using the updated
            /// JSON object to this quota request API. This will update the quotas to the
            /// values specified. The AzureAsyncOperation header in the response will be
            /// used to track the status of the quota request. Please poll the url provided
            /// in AzureAsyncOperation Header to get the status.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static QuotaRequestOneResourceProperties BeginCreate(this IQuotasOperations operations, string subscriptionId, string providerId, string location, QuotaRequestOneResourceProperties createQuotaRequest, string ifMatch)
            {
                return operations.BeginCreateAsync(subscriptionId, providerId, location, createQuotaRequest, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information. This information consists of a list
            /// of resources and information regarding those resources. For all the
            /// resources in that list which requires an update to their quotas, update
            /// their limit fields in the response from the Get request to their new
            /// values. Then, submit individual request for each resource using the updated
            /// JSON object to this quota request API. This will update the quotas to the
            /// values specified. The AzureAsyncOperation header in the response will be
            /// used to track the status of the quota request. Please poll the url provided
            /// in AzureAsyncOperation Header to get the status.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QuotaRequestOneResourceProperties> BeginCreateAsync(this IQuotasOperations operations, string subscriptionId, string providerId, string location, QuotaRequestOneResourceProperties createQuotaRequest, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(subscriptionId, providerId, location, createQuotaRequest, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information. This information consists of a list
            /// of resources and information regarding those resources. For all the
            /// resources in that list which requires an update to their quotas, update
            /// their limit fields in the response from the Get request to their new
            /// values. Then, submit individual request for each resource using the updated
            /// JSON object to this quota request API. This will update the quotas to the
            /// values specified. The AzureAsyncOperation header in the response will be
            /// used to track the status of the quota request. Please poll the url provided
            /// in AzureAsyncOperation Header to get the status.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static QuotaRequestOneResourceProperties BeginUpdate(this IQuotasOperations operations, string subscriptionId, string providerId, string location, QuotaRequestOneResourceProperties createQuotaRequest, string ifMatch)
            {
                return operations.BeginUpdateAsync(subscriptionId, providerId, location, createQuotaRequest, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information. This information consists of a list
            /// of resources and information regarding those resources. For all the
            /// resources in that list which requires an update to their quotas, update
            /// their limit fields in the response from the Get request to their new
            /// values. Then, submit individual request for each resource using the updated
            /// JSON object to this quota request API. This will update the quotas to the
            /// values specified. The AzureAsyncOperation header in the response will be
            /// used to track the status of the quota request. Please poll the url provided
            /// in AzureAsyncOperation Header to get the status.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QuotaRequestOneResourceProperties> BeginUpdateAsync(this IQuotasOperations operations, string subscriptionId, string providerId, string location, QuotaRequestOneResourceProperties createQuotaRequest, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(subscriptionId, providerId, location, createQuotaRequest, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the current quota limit and usages for all the resources by the
            /// resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limits and usages for the resource provider
            /// for the specified location. This response can be used to submit
            /// quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CurrentQuotaLimitBase> ListStatusNext(this IQuotasOperations operations, string nextPageLink)
            {
                return operations.ListStatusNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current quota limit and usages for all the resources by the
            /// resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limits and usages for the resource provider
            /// for the specified location. This response can be used to submit
            /// quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CurrentQuotaLimitBase>> ListStatusNextAsync(this IQuotasOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStatusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
