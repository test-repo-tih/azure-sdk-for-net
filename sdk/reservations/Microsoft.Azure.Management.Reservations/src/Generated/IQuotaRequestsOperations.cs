// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Reservations
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// QuotaRequestsOperations operations.
    /// </summary>
    public partial interface IQuotaRequestsOperations
    {
        /// <summary>
        /// Submits Quota Requests for the resources by a resource provider at
        /// the specified location.
        /// </summary>
        /// <remarks>
        /// Submits Quota change requests for the resources by a resource
        /// provider for the specified location. To use, first make a Get
        /// request to get quota information. This information consists of a
        /// list of resources and information regarding those resources. For
        /// all the resources in that list which require an update to their
        /// quotas, update their limit fields in the response from the Get
        /// request to their new values. Then, submit this updated JSON object
        /// to this quota request API. This will update the quotas to the
        /// values specified. For updating only few resources, please use
        /// Patch.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// Azure subscription id.
        /// </param>
        /// <param name='providerId'>
        /// Azure resource Provider id.
        /// </param>
        /// <param name='location'>
        /// Azure region.
        /// </param>
        /// <param name='createQuotaRequests'>
        /// Quota requests payload.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from
        /// the header response of the GET request or it should be * for
        /// unconditional update.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<object>> CreateWithHttpMessagesAsync(string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests, string ifMatch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submits a Quota Requests for multiple resources by a resource
        /// provider at the specified location.
        /// </summary>
        /// <remarks>
        /// Submits Quota change requests for multiple resources by a resource
        /// provider for the specified location. To use, first make a Get
        /// request to get quota information. This information consists of a
        /// list of resources and information regarding those resources. For
        /// all the resources in that list which require an update to their
        /// quotas, update their limit fields in the response from the Get
        /// request to their new values, remove the values which doesn't
        /// require any update. Then, submit this updated JSON object to this
        /// quota request API. This will update the quotas to the values
        /// specified.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// Azure subscription id.
        /// </param>
        /// <param name='providerId'>
        /// Azure resource Provider id.
        /// </param>
        /// <param name='location'>
        /// Azure region.
        /// </param>
        /// <param name='createQuotaRequests'>
        /// Quota requests payload.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from
        /// the header response of the GET request or it should be * for
        /// unconditional update.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<object>> UpdateWithHttpMessagesAsync(string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests, string ifMatch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the Quota request status by requestId, for the specified
        /// resource provider at specified location.
        /// </summary>
        /// <remarks>
        /// Gets the QuotaRequest details and status by the quota requestId for
        /// the resources for the resource provider at a specific location. The
        /// requestId is returned as response to the Put requests for
        /// serviceLimits.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// Azure subscription id.
        /// </param>
        /// <param name='providerId'>
        /// Azure resource Provider id.
        /// </param>
        /// <param name='location'>
        /// Azure region.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<QuotaRequestDetails>> GetStatusWithHttpMessagesAsync(string subscriptionId, string providerId, string location, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// For the specified location and resource Provider, gets the quota
        /// requests under the subscription over the time
        /// period of one year ago from now to one year back, based on the
        /// filter specified.
        /// </summary>
        /// <remarks>
        /// For the specified location and Resource provider gets the current
        /// quota requests under the subscription over the time period of one
        /// year ago from now to one year back. oData filter can be used to
        /// select quota requests.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// Azure subscription id.
        /// </param>
        /// <param name='providerId'>
        /// Azure resource Provider id.
        /// </param>
        /// <param name='location'>
        /// Azure region.
        /// </param>
        /// <param name='filter'>
        /// | Field                    | Supported operators
        /// |---------------------|------------------------
        ///
        /// |requestSubmitTime | ge, le, eq, gt, lt
        /// </param>
        /// <param name='top'>
        /// Number of records to return.
        /// </param>
        /// <param name='skiptoken'>
        /// Skiptoken is only used if a previous operation returned a partial
        /// result. If a previous response contains a nextLink element, the
        /// value of the nextLink element will include a skiptoken parameter
        /// that specifies a starting point to use for subsequent calls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<QuotaRequestDetails>>> ListStatusWithHttpMessagesAsync(string subscriptionId, string providerId, string location, string filter = default(string), int? top = default(int?), string skiptoken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submits Quota Requests for the resources by a resource provider at
        /// the specified location.
        /// </summary>
        /// <remarks>
        /// Submits Quota change requests for the resources by a resource
        /// provider for the specified location. To use, first make a Get
        /// request to get quota information. This information consists of a
        /// list of resources and information regarding those resources. For
        /// all the resources in that list which require an update to their
        /// quotas, update their limit fields in the response from the Get
        /// request to their new values. Then, submit this updated JSON object
        /// to this quota request API. This will update the quotas to the
        /// values specified. For updating only few resources, please use
        /// Patch.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// Azure subscription id.
        /// </param>
        /// <param name='providerId'>
        /// Azure resource Provider id.
        /// </param>
        /// <param name='location'>
        /// Azure region.
        /// </param>
        /// <param name='createQuotaRequests'>
        /// Quota requests payload.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from
        /// the header response of the GET request or it should be * for
        /// unconditional update.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<object>> BeginCreateWithHttpMessagesAsync(string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests, string ifMatch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submits a Quota Requests for multiple resources by a resource
        /// provider at the specified location.
        /// </summary>
        /// <remarks>
        /// Submits Quota change requests for multiple resources by a resource
        /// provider for the specified location. To use, first make a Get
        /// request to get quota information. This information consists of a
        /// list of resources and information regarding those resources. For
        /// all the resources in that list which require an update to their
        /// quotas, update their limit fields in the response from the Get
        /// request to their new values, remove the values which doesn't
        /// require any update. Then, submit this updated JSON object to this
        /// quota request API. This will update the quotas to the values
        /// specified.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// Azure subscription id.
        /// </param>
        /// <param name='providerId'>
        /// Azure resource Provider id.
        /// </param>
        /// <param name='location'>
        /// Azure region.
        /// </param>
        /// <param name='createQuotaRequests'>
        /// Quota requests payload.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from
        /// the header response of the GET request or it should be * for
        /// unconditional update.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<object>> BeginUpdateWithHttpMessagesAsync(string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests, string ifMatch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// For the specified location and resource Provider, gets the quota
        /// requests under the subscription over the time
        /// period of one year ago from now to one year back, based on the
        /// filter specified.
        /// </summary>
        /// <remarks>
        /// For the specified location and Resource provider gets the current
        /// quota requests under the subscription over the time period of one
        /// year ago from now to one year back. oData filter can be used to
        /// select quota requests.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<QuotaRequestDetails>>> ListStatusNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
