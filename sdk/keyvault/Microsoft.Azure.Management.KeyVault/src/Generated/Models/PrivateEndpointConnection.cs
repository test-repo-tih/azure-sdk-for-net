// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.KeyVault.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Private Endpoint Connection resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PrivateEndpointConnection : Resource
    {
        /// <summary>
        /// Initializes a new instance of the PrivateEndpointConnection class.
        /// </summary>
        public PrivateEndpointConnection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PrivateEndpointConnection class.
        /// </summary>
        /// <param name="location">The supported Azure location where the key
        /// vault should be created.</param>
        /// <param name="privateLinkServiceConnectionState">The approval state
        /// of the private link connection.</param>
        /// <param name="id">The Azure Resource Manager resource ID for the key
        /// vault.</param>
        /// <param name="name">The name of the key vault.</param>
        /// <param name="type">The resource type of the key vault.</param>
        /// <param name="tags">The tags that will be assigned to the key vault.
        /// </param>
        /// <param name="privateEndpoint">The resource of private
        /// endpoint.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// private endpoint. Possible values include: 'Succeeded', 'Creating',
        /// 'Deleting', 'Failed'</param>
        public PrivateEndpointConnection(string location, PrivateLinkServiceConnectionState privateLinkServiceConnectionState, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), PrivateEndpoint privateEndpoint = default(PrivateEndpoint), string provisioningState = default(string))
            : base(location, id, name, type, tags)
        {
            PrivateEndpoint = privateEndpoint;
            PrivateLinkServiceConnectionState = privateLinkServiceConnectionState;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource of private endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateEndpoint")]
        public PrivateEndpoint PrivateEndpoint { get; set; }

        /// <summary>
        /// Gets or sets the approval state of the private link connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateLinkServiceConnectionState")]
        public PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state of the private endpoint.
        /// Possible values include: 'Succeeded', 'Creating', 'Deleting',
        /// 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (PrivateLinkServiceConnectionState == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrivateLinkServiceConnectionState");
            }
        }
    }
}
